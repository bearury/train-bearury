import { inject, Injectable } from '@angular/core';
import { addDoc, collection, collectionData, deleteDoc, doc, docData, Firestore, getDoc, orderBy, query, updateDoc } from '@angular/fire/firestore';
import { TuiAlertService } from '@taiga-ui/core';
import { combineLatest, forkJoin, from, map, Observable, of, switchMap, tap } from 'rxjs';
import { LoaderService } from '../loader.service';
import { Station } from '@interfaces/station.interface';
import { StationEntity } from '@entitys/station.entity';
import { fromPromise } from 'rxjs/internal/observable/innerFrom';


@Injectable({
  providedIn: 'root',
})
export class StationsFirestoreService {
  private readonly db = inject(Firestore);
  private readonly alert = inject(TuiAlertService);
  private readonly loaderService = inject(LoaderService);

  public getAll(): Observable<Station[]> {
    this.loaderService.show();
    const data$ = this.getAllEntity();

    return data$.pipe(
      map((stations) => {
        return stations.map((station) => {
          return {
            ...station,
            connectedTo: station.connectedTo.map((connected) => ({
              name: stations.find(st => st.id === connected.id)?.city ?? 'test',
              distance: connected.distance,
            })),
          };
        });
      }),
      tap(() => this.loaderService.hide()),
    ) as Observable<Station[]>;
  }

  public addStation(station: Omit<StationEntity, 'id'>): Observable<(void | null)[]> {
    const stationRef = collection(this.db, 'stations');

    return from(addDoc(stationRef, station)).pipe(
      switchMap((docRef) => {
        return this.updatedConnectedToAddStation(docRef.id, station.connectedTo);
      }),
    );
  }

  public updateStationConnectedTo(stationId: string, connectedTo: { id: string, distance: number }[]): Observable<void[] | null> {
    return fromPromise(updateDoc(doc(this.db, 'stations', stationId), {
        connectedTo,
      }),
    ).pipe(
      switchMap(() => {
        return this.getStationById(stationId).pipe(
          switchMap(station => {
            if (station) {
              return this.updateConnectedAfterUpdatingCurrentStation(station, connectedTo);
            }
            return of(null);
          }),
        );
      }),
    );
  }

  public getStationById(stationId: string): Observable<StationEntity | null> {
    const userRef = doc(this.db, 'stations', stationId);
    return docData(userRef, { idField: 'id' }).pipe(
      map((station) => station as StationEntity),
      map((data) => (data ? data : null)),
    );
  }

  public deleteStation(stationId: string): Observable<void> {
    return from(deleteDoc(doc(this.db, 'stations', stationId)));
  }

  private updatedConnectedToAddStation(stationId: string, connectedTo: { id: string, distance: number }[]): Observable<(void | null)[]> {
    const updates = connectedTo.map(connStation => {
      const connStationRef = doc(this.db, 'stations', connStation.id);

      // –ü–æ–ª—É—á–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ connectedTo –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      return from(getDoc(connStationRef)).pipe(
        switchMap((docSnapshot) => {
          if (docSnapshot.exists()) {
            const existingData = docSnapshot.data() as StationEntity;
            const existingConnectedTo = existingData.connectedTo || [];

            // –û–±–Ω–æ–≤–ª—è–µ–º connectedTo –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é
            return from(updateDoc(connStationRef, {
              connectedTo: [...existingConnectedTo, { id: stationId, distance: connStation.distance }],
            }));
          } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Å—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            this.alert.open(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–∏ —Å ID ${connStation.id} `);
            return of(null); // –∏–ª–∏ –≤—ã–±—Ä–æ—Å—å—Ç–µ –æ—à–∏–±–∫—É
          }
        }),
      );
    });
    // –ü–æ–¥–æ–∂–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    return combineLatest(updates);
  }

  private getAllEntity(): Observable<StationEntity[]> {
    const queryId = query(
      collection(this.db, 'stations'),
      orderBy('city', 'asc'),
    );
    return collectionData(queryId, { idField: 'id' }) as Observable<StationEntity[]>;
  }

  //–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±–µ–∫–µ –≤–≤–∏–¥—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π firestore
  private updateConnectedAfterUpdatingCurrentStation(currentStation: StationEntity, connectedTo: { id: string, distance: number }[]): Observable<void[] | null> {
    return this.getAllEntity().pipe(
      switchMap((stations) => {
        const updates = stations.map((station) => {
          const currentConnectedTo = station.connectedTo;
          const hasCurrentStation = currentConnectedTo.some(connect => connect.id === currentStation.id);
          const isConnectedToCurrentStation = connectedTo.some(connect => connect.id === station.id);


          console.log('üçÅ: ', currentConnectedTo, hasCurrentStation, isConnectedToCurrentStation);


          if (station.id === currentStation.id) return null; // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è —Ç–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null

          // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
          if (hasCurrentStation) {
            // –ï—Å–ª–∏ –æ–Ω–∞ –Ω–µ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ connectedTo, –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
            if (!isConnectedToCurrentStation) {
              const updatedConnectedTo = currentConnectedTo.filter(connect => connect.id !== currentStation.id);
              return fromPromise(updateDoc(doc(this.db, 'stations', station.id), { connectedTo: updatedConnectedTo }));
            }
          } else {
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
            const distance = connectedTo.find(connect => connect.id === station.id)?.distance || 0;
            const updatedConnectedTo = [...currentConnectedTo, { id: currentStation.id, distance }];
            return fromPromise(updateDoc(doc(this.db, 'stations', station.id), { connectedTo: updatedConnectedTo }));
          }

          return null; // –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
        }).filter(update => update !== null); // –£–±–∏—Ä–∞–µ–º null –∏–∑ –º–∞—Å—Å–∏–≤–∞

        return updates.length > 0 ? forkJoin(updates) : of(null); // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      }),
    );
  };
}

